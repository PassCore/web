@page "/passcore"
@using global::Passcore;

<h1>Passcore</h1>

<table>

    <tr>
        <td>
            <label for="txvMasterKey" class="col-form-label">MasterKey</label>
        </td>
        <td>
            <input class="form-control" id="txvMasterKey" @bind="MasterKey"/>
        </td>
    </tr>
    <tr>
        <td>
            <label for="txvPasswd" class="col-form-label">Password</label>
        </td>
        <td>
            <input class="form-control" id="txvPasswd" @bind="Password"/>
        </td>
    </tr>

    <tr>
        <td>
            <label for="txvEnhance" class="col-form-label">Enhance</label>
        </td>
        <td>
            <input class="form-control" id="txvEnhance" @bind="Enhance"/>
        </td>
    </tr>

    <tr>
        <td>
            <label for="skbLength" class="col-form-label">Length Control</label>
        </td>
        <td>
            <input type="range" class="form-range" id="skbLength" min="0" max="@LengthMax" @bind="SkbLength">
        </td>
    </tr>
    <tr>
        <td>
            <input type="checkbox" id="ckbIsWeak" @bind="IsWeak">
            <label for="ckbIsWeak"> Weak password</label>
        </td>
    </tr>
    <tr>
        <td>
            <input type="checkbox" id="ckbIsChar" @bind="IsCharRequired">
            <label for="ckbIsChar"> Is Char Required</label>
        </td>
    </tr>
    <tr>
        <td>
            <p>Password Length</p>
        </td>
        <td>
            <p>@LengthStr</p>
        </td>
    </tr>
    <tr>
        <td>
            <p>Result</p>
        </td>
        <td>
            <p>@Result</p>
        </td>
    </tr>
    <tr>
        <td>
            <button class="btn btn-primary" @onclick="GetResult">Generate</button>
        </td>
        <td>
            <button class="btn btn-primary" @onclick="Clear">Clear</button>
        </td>
    </tr>
</table>


@code {
    private int _skbLength = 0;
    private bool _isWeak;
    private string LengthStr { get; set; } = GetLength(0).ToString();

    private bool IsWeak
    {
        get => _isWeak;
        set
        {
            if (GetMax(value) < SkbLength)
            {
                _skbLength = GetMax(value);
            }
            _isWeak = value;
            LengthStr = GetLength(SkbLength, value).ToString();
        }
    }

    private int SkbLength
    {
        get => _skbLength;
        set
        {
            _skbLength = value;
            LengthStr = GetLength(value, IsWeak).ToString();
        }
    }

    private int LengthMax
    {
        get => GetMax(IsWeak);
    }

    private string MasterKey { get; set; }
    private string Enhance { get; set; }
    private string Password { get; set; }
    private bool IsCharRequired { get; set; }
    private string Result { get; set; }

    private static readonly int[] WeakLength = {4, 6, 8, 10};

    private static readonly int[] NormLength = {12, 16, 24, 32, 48, 64, 128, 256, 384, 512};

    private static int GetMax(bool isWeak = false)
    {
        if (isWeak)
            return WeakLength.Length - 1;
        return NormLength.Length - 1;
    }

    private static int GetLength(int index, bool isWeak = false)
    {
        if (isWeak)
            return WeakLength[index];
        return NormLength[index];
    }

    private void Clear()
    {
        MasterKey = Enhance = Password = Result = "";
    }

    private void GetResult()
    {
        Result = global::Passcore.Passcore.GeneratePassword(
            GetDic(),
            GetLength(SkbLength, IsWeak),
            MasterKey == null ? "" : MasterKey,
            Password == null ? "" : Password,
            Enhance == null ? "" : Enhance
            );
    }

    private (char[] dict, int occur)[] GetDic()
    {
        if (IsCharRequired)
            return new (char[] dict, int occur)[]
            {
                (Tables.LatinLower, 0),
                (Tables.LatinUpper, 0),
                (Tables.Number, 0),
                (Tables.Symbol, 0)
            };
        else
            return new (char[] dict, int occur)[]
            {
                (Tables.LatinLower, 0),
                (Tables.LatinUpper, 0),
                (Tables.Number, 0)
            };
    }

}